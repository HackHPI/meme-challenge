// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    firstName     String
    lastName      String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    events        Event[]
    images        Image[]
    memes         Meme[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id          String   @id @default(cuid())
    name        String
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    memes       Meme[]
}

model Image {
    id           String   @id @default(cuid())
    url          String
    storageKey   String
    blurHash     String
    uploadedBy   User     @relation(fields: [uploadedById], references: [id])
    uploadedById String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    meme         Meme?
}

model Meme {
    id          String   @id @default(cuid())
    image       Image    @relation(fields: [imageId], references: [id])
    imageId     String   @unique
    description String
    event       Event    @relation(fields: [eventId], references: [id])
    eventId     String
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
